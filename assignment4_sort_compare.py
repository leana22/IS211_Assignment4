# -*- coding: utf-8 -*-
"""Assignment4.sort.compare

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DMTV1OCB79NvyTeM_gENOpNg3PJ-VnL-
"""

import argparse
# other imports go here

import random
import time 

def get_me_random_list(n):
    
    a_list = list(range(n))
   # random.shuffle(a_list)
    return a_list
    
def insertion_sort(a_list):
  for index in range(1, len(a_list)):
      current_value = a_list[index]
      position = index
      while position > 0 and a_list[position - 1] > current_value:
          a_list[position] = a_list[position - 1]
          position = position - 1
      a_list[position] = current_value
  return a_list

def gap_insertion_sort(a_list, start, gap):
  for i in range(start + gap, len(a_list), gap):
    current_value = a_list[i]
    position = i
  while position >= gap and a_list[position - gap] > current_value:
    a_list[position] = a_list[position - gap]
    position = position - gap
  a_list[position] = current_value

def shell_sort(a_list):
  sublist_count = len(a_list) // 2
  while sublist_count > 0:
    for start_position in range(sublist_count):
      gap_insertion_sort(a_list, start_position, sublist_count)
    print("After increments of size", sublist_count, "The list is",a_list)
    sublist_count = sublist_count // 2

def python_sort(a_list):
  a_list
  a_list.sort() 
  return a_list

def main():
  random.seed(100)
  list_sizes= [500,1000, 10000]
  total_time =0
  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = insertion_sort(mylist)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using insertion_sort was {avg_time:0.8f}seconds")

  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = shell_sort(mylist)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using shell_sort was {avg_time:0.8f}seconds")

  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = python_sort(mylist)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using python_sort was {avg_time:0.8f}seconds")


main()