# -*- coding: utf-8 -*-
"""Assignment4search_compare

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A6YM6y8GOe_hPABQnX4fmDXFHiYEQMDd
"""

import argparse
# other imports go here
import random
import time 

def get_me_random_list(n):
    a_list = range(n);
    #random.shuffle(a_list)
    return a_list
    
def sequential_search(a_list,item):
   pos_1 = 0
   while i < len(a_list):
       if a_list[pos_1] ==item:
          return True
       pos_1 =pos_1 + 1
   return False

def ordered_sequential_search(a_list,item):
    pos = 0
    found = False
    stop = False
    while pos < len(a_list) and not found and not stop:
        if a_list[pos] == item:
            found = True
        else:
            if a_list[pos] > item:
                stop = True
            else:
                pos = pos + 1

    return found

def binary_search_iterative(a_list,item):
  first = 0
  last = len(a_list)-1
  found = False

  while first <= last and not found:
    mid = (first + last) // 2
    if a_list[mid] == item:
      found = True
    else:
      if item < a_list[mid]:
        last = mid -1
      else:
        first = mid +1
  return found


    
def binary_search_recursive(a_list,item):
  if len(a_list) ==0:
    return False
  else:
    mid = len(a_list) // 2
  if a_list[mid] == item:
    return True
  else:
    if item  < a_list[mid]:
      return binary_search_recursive(a_list[:mid], item)
    else:
      return binary_search_recursive(a_list[mid+ 1:], item)

def main(item):
  random.seed(100)
  list_sizes= [500,1000, 10000]
  total_time =0
  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = sequential_search(mylist, item)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using python was {avg_time:0.8f}seconds")

  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = ordered_sequential_search(mylist, item)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using python was {avg_time:0.8f}seconds")

  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = binary_search_recursive(mylist, item)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using python was {avg_time:0.8f}seconds")

  for list_size in list_sizes:
      for i in range (100):
          mylist = get_me_random_list(list_size)
          start= time.time()
          ordered_list = binary_search_iterative(mylist, item)
          end = time.time()
          search_time= end - start
          total_time += search_time
      avg_time = total_time/100
      print(f"avg time search  a list {list_size} using python was {avg_time:0.8f}seconds")

if __name__ == "__main__":
    """Main entry point"""
main(args.item)
  

main(200)